_ = a single character
patterns; max word size = 3
	_
	__
	___
	_ _
	_ __
	__ _
	__ __
	_ ___
	___ _
	__ ___
	___ __
	___ ___
	…
max word size = longest word in whatever language
language structure…
rosetta stone…

mathematics is similar, but…
domain-specific languages…
universal languages…
alphabet letters ∈ {─,┴,┬,┼,├,┤,┘,┐,┌,└,│} …might just use english letters for now
definitions are language dependent…
only use what you need…
basically the same as linguistics…
but the idea is to further understanding…
…
unsigned base 4:
	3 = ┼
	2 = ┬
	1 = ┴
	0 = ─
signed base 3:
	∓श्याम = ┼
	+1    = ┴
	±0    = ─
	-1    = ┬
	∓श्याम = ┼
unsigned base 16:
	15 = ├┤
	14 = ┌┤
	13 = └┤
	12 = ├┐
	11 = ├┘
	10 = ┌┐
	09 = ─┤
	08 = ┌┘
	07 = └┐
	06 = ├─
	05 = └┘
	04 = ─┐
	03 = ┌─
	02 = ─┘
	01 = └─
	00 = ──
signed base 3:
	∓श्याम = ├┤
	+07   = └┐
	+06   = ├┐
	+05   = ├┘
	+04   = ├─
	+03   = └┘
	+02   = ─┘
	+01   = └─
	±00   = ──
	-01   = ─┐
	-02   = ┌─
	-03   = ┌┐
	-04   = ─┤
	-05   = ┌┤
	-06   = └┤
	-07   = ┌┘
	∓श्याम = ├┤
…
numbers =
	├─┼┴┼┬─┴┘
functions =
	┬
	│
	┼
	├
	┼
	┤
	│
	├
	└
parameters =
	┌ │          │          │          ┐
	│ │ number_a │ number_b │ number_c │
	└ │          │          │          ┘
functions ≠ parameters
parameters can stack numbers vertically, but this must be defined =
	a b
	c d
	…
	a b
	d c
	…
	a c
	b d
	…
	a d
	b c
	…
	a c
	d b
	…
	a d
	c b
…
use natural language to define every"-thing" (for now); including number/function systems (size)…
number_structure = natural_language_variables
number_size = x
function_size = 2 = {a,b}
a = addition_definition
b = subtraction_definition
using the functions…goto start of file…
exempli gratia:
	a(,x,y,z)
	a(,b(,z,x),a(,x,y))
	…
	_[,_,_,_]
	_[,_[,_,_],_[,_,_]]
compare different systems…
