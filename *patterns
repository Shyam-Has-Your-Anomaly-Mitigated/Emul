base is probably binary...
implementation_language(x) = implementation_language(str(x)) = implementation_language("x")

base = perl6(base) ...or flip the bits RTFManually!!! :D
base = base(base)
base = base(assembly)
base = assembly(assembly)
base = assembly(language)
base = language(language)
base = language(a)
base = a(a) ...abstract
base = a(b)
base = b(b) ...binary
base = b(c)
base = c(c) ...compilation...

this repeating process should be automated
where languages are described in a way
that can generate instructions

the easy part is `process $instructions`
∵ the existence of some `process` is assumed

a(b)
b(b)
b(c)

but perl6(base) is just :2(/(0|1)+/) or :16(/(\d|a|b|c|d|e|f)+/i) or ETC
hmm...
describe language for implementation
implementation must throw bugs at the user

abstractions vs material consideration
types; at the end of the day it's all just the same binary "-thing"
instructions; they actually do "-thing"s

if software can be understanding, it should be able to automate docommentation; but that needs natural language processing...

(i)'tis but the cycle of linguistic evolution: a(b) → b(b) → b(c) ...where letters represent different versions of the langauge on a tempoℝæl axis
I can see why so many languages are implemented in C, and other languages; they are just avoiding/ignoring the problem

generate an assembler/compiler, an interpreter, and possibly a REPL
the implementation won't throw bugs at the user, it will just positionally fail
a seperate program can be triggered by failure, and throw bugs at the user
DOTADIW
:∨∨(:gen(,machine,language):err(:gen(,machine,language))) 8≪ memoise the referential transparency
probably need :gen(,system,machine,language) but I only know Linux...
,machine can be virtual
,language can be not Shyamscript
bugs are in my SEP field; they should be useful, but I'll probably just KISS them to death (my death)
...
wait, the final implementation needs to throw bugs; so just wrap it up
:err(:gen(,system,machine,language))
...
should be able to choose between interpreter VS JIT; but compiler-to-JIT is trivial

probably better to just merge assembler/compiler/JIT/interpreter/REPL/ETC into a single configurable/modal processor c̄ commandline arguments/parameters 
:processor(,language,system,machine)
language.bugs can be the configuration file; I'm sure different modes (assembler/compiler/JIT/interpreter/REPL/ETC) will share commonalities in their ecosystems, and the way they throw bugs (trajectory, velocity, ETC)
`shyam shyamscript repl`
`shyam shyamscript interpret $file`
`shyam shyamscript jit $file`
`shyam shyamscript compile $file`
`shyam shyamscript $ETC $file`
flags/options/ETC are in `$config`
no need for `-r *`; `$file` should lead to (recursive/circular/ETC) dependencies
`$config` should have (sub)directories to `-r *`; for arbitrary `$address/$input` (like the perl wrapper; `~/bin/shyam/$input`)
`$config` can configure (sub)directories/files/ETC to be processed as monolithic, or modular/standalone; if it doesn't fit in RAM, there's a plan...
"can't fit the whole program into RAM? just write a small program to REPL the program line-by-line from file"

but JS is both the ,system & ,machine
:src(,instructions_a,language_a,language_b) 8≪ ,instructions_b
comments are in my SEP field; they should be useful, but I'll probably just KISS them to death (my death)
,instructions can be in any format; higher-order lists, strings, numbers (any base), ETCs... (it's probably better/consistent to just use memorised numbers; computation/mathematics/optimisation/ETC)

,languages can be any language; Shyamscript, JS, machine instructions, assembly, brainfuck, whitespace, piet, ETC
the host system/machine needs to be known for "-thing"s like numerical base conversions; or the base is provided for (EG ,instructional) input, or some"-thing"...

higher-order hierarchical abstract machines are an interesting concept...
