there's sort of like a ¿bidirectional? type hierarchy; kind of like class inheritance in OOP
look; every"-thing is just the same, okay!
that's just the way I want it to be
don't complain to me that I can't, nor shouldn't, be attempting to mix up my types; just make it work
tools should be more intelligent, and act like I'm their project manager
	first day at new job
	given task
	start working on task
	project manager peers over my shoulder
	project manager says not to worry about best practices, and to just get the job done by the deadline, and make sure it works
	by the deadline your program doesn't even compile, but you hand it in anyway
	project manager says to grab your "-thing"s and get out
	project manager (working ass off) calls security (sits on ass all day)
	you're confused
		project manager says they need mind readers; "-thing"s will be said c̄ implications, and if you don't understand some"-thing", then you should ask
		project managers don't have the time for hand-holding (pair programming solves this to help newbies survive)
		project managers handle multiple unrelated projects
		you can't even read your little programs, and understand them; try attempting to understand the entire project before a meeting
	you ask for a second chance
	project manager says to sign a severance-package waver
	you sign it
	project manager fires you for free
	the waiver didn't mention a second chance
	project managers need you to pay attention
	decision:
		a) you leave c̄ whatever's left of your pride/dignity/ETC
		b) you wait for security to escort you off the premises

lists are the base data type
	,[]

numbers are made up of lists
	,[,sign,int,fraction,base] 8≪ +3.2₁₀ (π (https://youtu.be/bFNjA9LOPsg (https://en.wikipedia.org/wiki/Pi#In_popular_culture)))
	https://github.com/Shyam-Has-Your-Anomaly-Mitigated/Shyamscript/blob/master/log/syntaxx.md
		8<< number format
		[sign:int:fraction:base]
		: sign = [: [[]:[]:[]]: [[]:[]]: [[]]: []] 8<< ['±':'∓':'-':'+']
		: int = fraction = base = base_1
	canfp.slack.com ,["HE:12018,05,09,14,10,25"]
		In 1843 Ada Lovelace came up c̄ the idea of using numbers to represent non-numerical "-thing"s (letters, musical notes, ETC).
	...technically numbers were used to represent other "-thing"s all throughout history
		a square shape is x²
		3 "-thing"s + 1334 "-thing"s = 1337 "-thing"s
			3x+1334x=1337x
			3+1334=1337 ∵ x is cancellative c̄ implicit semantics
		Pythagoreans were also musicians; musica universalis
	...programming is also as historical
		https://en.wikipedia.org/wiki/List_of_pioneers_in_computer_science
			click to order by date
		https://en.wikipedia.org/wiki/Book_of_Ingenious_Devices
		https://en.wikipedia.org/wiki/Ismail_al-Jazari
		https://en.wikipedia.org/wiki/Baghdad_Battery
		manufacturers probably went out of business as new competitors arose c̄ technological innovations
		people probably felt threatened by robots stealing their jobs at the time
		inventor hunting VS witch hunting
		"witches" probably hypnotised suggestible (intoxicated) men, using the power of persuasion to deceive their will on others
		modern day "witches" use illusory trickery for ticket evasion
		"witches" VS clowns; every"-thing" is just made-up to make-(you)-believe in a false sense of ℝeality

characters are just numbers

strings are just a list of characters

every"-thing" is just a number, which is just a list of lists
EG; strings should be additive, and numbers concatenative/appendable
:=(:×(,"3",2),"f")
:=(:cat(,84,77),"ℝ")
if you want to transmit a number to the console, the number must be converted to a "string"; EG :=(,3:∨(,00110011₂,63₈,51₁₀,33₁₆:etc()<0>))

I like ℝeal Machine Instructions ∵ there are no bugs until you attempt a computation; no need for `compiler -rf`
Shyamscript needs this ∵ I need this; other users can configure/preprocess restrictions

this is like DSLs all over again
