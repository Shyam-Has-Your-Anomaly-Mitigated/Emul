#!/usr/bin/env sh
version() {
	ret '2017-09-30';
	# I CBF...
	ret ' ($n days ago)';
}
proper() {
	ret \\033c;
	case "$1" in
		-h|--hlp|--help) rtfm $(width) "$(guide)" "$(logic)" $(length $(width) "$(guide)") $(length $(width) "$(logic)");;
		-o|--neO) [ -z "$2" ] && mis || tdo;;
		-r|--rpl) [ -z "$2" ] && mis || tdo;;
		-i|--int) [ -z "$2" ] && mis || tdo;;
		-c|--cmp) [ -z "$2" ] && mis || tdo;;
		-a|--asm) [ -z "$2" ] && mis || tdo;;
		-l|--lnk) [ -z "$2" ] && mis || tdo;;
		-v|--ver) [ -z "$2" ] && mis || tdo;;
		--version) version;;
		*) tdo;;
	esac;
	ret \\n;
	exit 0;
}
# this is an interesting `return` concept...
lambda() { [ $2 -ne 0 ] && ret $1 && lambda $1 $(( $2 -1 )); }
width() { ret $(/usr/bin/env tput cols); }
length() { ret $(( ($1-${#2})/2 )); }
guide() { ret " DON'T PANIC! "; }
logic() { ret " LIVE LONG AND PROSPER! "; }
# this is named after formal communication...
protocol() { ret "$4$2$4" && [ $(( $3 * 2 + ${#2} )) -ne $1 ] && ret λ; }
bold() { ret "\033[1m$@\033[0m"; }
line() { ret "\033[4m$@\033[0m"; }
rtfm() {
	# http://matrix.wikia.com/wiki/Prime_Program
	protocol $1 "$2" $4 "$(lambda λ $(( $1 + $4 )))";
	# for the spaceheads; spacial distance must be maintained *between* the tabulation symbols...this is the optimal solution! ..!.. -_- ..!..
	ret "\n\n\n$(bold NAME)\n\temul - pronounced Emmell, as in Emmett Brown; WUBBA LUBBA DUB DUB!!! :D\n\n\n$(bold SYNOPSIS)\n\t$(bold emul) $(line INSTRUCTION) [$(line ARGUMENT)]...\n\n\n$(bold DESCRIPTION)\n\ta purely functional-logical meta-linguistic list processor\n\tc̄ PCRE\n\t∧ inline assembly\n\t∧ maybe some OOP if I can be smalltalked into it...\n\n\n$(bold INSTRUCTION)";
	ret "$(
		printf '\n\t-%b'\
			"$(bold h), $(bold --hlp) \treturn this helpful docommentation"\
			"$(bold o), $(bold --neO) \tcompute other parameters as one-liners"\
			"$(bold r), $(bold --rpl) \tescape from this reality out to a repl"\
			"$(bold i), $(bold --int) \tinterpret ARGUMENT(s)"\
			"$(bold c), $(bold --cmp) \tcompile ARGUMENT(s)"\
			"$(bold a), $(bold --asm) \tassemble ARGUMENT(s)"\
			"$(bold l), $(bold --lnk) \tlink ARGUMENT(s)"\
			"$(bold v), $(bold --ver) \tformally verify ARGUMENT(s)"\
			"$(bold --version)\treturn the version of emul"\
		;
	)";
	ret "\n\n\n$(bold ARGUMENT)\n\t$(line DIRECTORY)\ta directory of $(line FILE)(s); recursively ∧ intelligently\n\t$(line FILE)     \ta file of $(line CODE)\n\t$(line CODE)     \ta line of emul\n\n\n$(bold AUTHOR)\n\tShyam Has Your Anomaly Mitigated!!! :D [shyam@shyam.id.au]\n\n\n";
	protocol $1 "$3" $5 "$(lambda λ $(( $1 + $5 )))";
	ret \\n;
	exit 3;
}
err() { ret "\033[31;42mERR:\033[0m $@"; }
rng() { ret "$(shuf -i 0-1 -n 1 -z)"; }
pic() { [ $(rng) -ne 0 ] && ret $1 || ret $2; }
a() { ret $(pic $(pic a A) 4); }
b() { ret $(pic $(pic b B) 6); }
c() { ret $(pic $(pic $(pic $(pic c C) $(pic \( \))) $(pic [ ])) $(pic \< \>)); }
d() { ret $(pic $(pic d D) 6); }
e() { ret $(pic $(pic e E) 3); }
f() { ret $(pic f F); }
g() { ret $(pic $(pic g G) 6); }
h() { ret $(pic $(pic h H) \#); }
i() { ret $(pic $(pic i I) 1); }
j() { ret $(pic j J); }
k() { ret $(pic k K); }
l() { ret $(pic $(pic l L) 1); }
n() { ret $(pic n N); }
m() { ret $(pic $(pic m M) $(n;n)); }
o() { ret $(pic $(pic o O) 0); }
p() { ret $(pic $(pic p P) 9); }
q() { ret $(pic $(pic q Q) 9); }
r() { ret $(pic r R); }
s() { ret $(pic $(pic s S) 5); }
t() { ret $(pic $(pic t T) 7); }
uv() { ret $(pic $(pic u U) $(pic v V)); }
w() { ret $(pic $(pic w W) $(uv;uv)); }
x() { ret $(pic x X); }
y() { ret $(pic $(pic y Y) λ); }
sz() { ret $(pic $(z) $(s)); }
z() { ret $(pic z Z); }
urgency() { ret $(pic $(pic $(pic $(pic ! !!!) $(pic ? ???)) $(pic !?! ?!?)) ...); }
mis() { ret "$(err "$(i) $(w;i;n)!!! :D")"; }
tdo() { ret "$(err "$(c;o;m;p;uv;t;e;r) $(s;a;y;sz) $(n;o;urgency)")"; }
ret() { printf "$@"; }
proper $@;
