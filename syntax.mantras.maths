:f(,a,b,c,d,e,f,g)
:f,[,a,b,c,d,e,f,g] 8≪ :f(,a,b,c,d,e,f,g)
:f(),[,a,b,c,d,e,f,g] 8≪ not ambiguous

,f(,a,b,c,d,e,f,g)
,f,[,a,b,c,d,e,f,g] 8≪ ,f,[,a,b,c,d,e,f,g]

:f:g(,x) 8≪ :f(g:(,x))

I need to think about the above...

8≪ can't remember <,0> vs ≪,0≫ vs .[,0]

8<
	http://www.amp-what.com/unicode/search/math
	http://www.amp-what.com/unicode/search/set
	https://en.wikipedia.org/wiki/Set_theory
>8

,[
	8< https://en.wikipedia.org/wiki/Template:Elementary_arithmetic >8

	8< https://en.wikipedia.org/wiki/Commutative_property >8

	:+(,a,b,c,d,e,f,g) 8≪ ,[,0+a+b+c+d+e+f+g]
	:-(,a,b,c,d,e,f,g) 8≪ ,[,-a,-b,-c,-d,-e,-f,-g]
	:×(,a,b,c,d,e,f,g) 8≪ ,[,1abcdefg]
	:÷(,a,b,c,d,e,f,g) 8≪ ,[,⅟a,⅟b,⅟c,⅟d,⅟e,⅟f,⅟g]

	:-:+(,a,b,c,d,e,f,g)  ,[,-1×(0+a+b+c+d+e+f+g)]
	:+:-(,a,b,c,d,e,f,g) 8≪ ,[,0-a-b-c-d-e-f-g]
	:÷:×(,a,b,c,d,e,f,g) 8≪ ,[,⅟(1abcdefg)]
	:×:÷(,a,b,c,d,e,f,g) 8≪ ,[,⅟(1abcdefg)]

	:-:+(,a,b,c,d,e,f,g):-(,a,b,c,d,e,f,g) 8≪ ,[,-1×(0+a+b+c+d+e+f+g)],[,-a,-b,-c,-d,-e,-f,-g]

	:root(,nths)(,radicands) 8≪ ,[nths] ... ,[,[,radicands]]
	8<
		it's better not to fail, but nopping is easy...
		if ,nths or ,radicands are empty return ,radicands
	>8
]

,[
	:=(:≠():¬:=():=:¬())
	:==(:≠≠():¬:==():==:¬())
	
	,[
		8<
			https://en.wikipedia.org/wiki/Template:Logical_connectives
			http://www.amp-what.com/unicode/search/logical

			∧ vs ⋀ vs ⋏
			∨ vs ⋁ vs ⋎
		>8

		8< https://en.wikipedia.org/wiki/Commutative_property >8

		:¬(,a,b,c,d,e,f,g) 8≪ ,[,¬a,¬b,¬c,¬d,¬e,¬f,¬g]
		:∧(,a,b,c,d,e,f,g) 8≪ ,[,a∧b∧c∧d∧e∧f∧g]
		:∨(,a,b,c,d,e,f,g) 8≪ ,[,a∨b∨c∨d∨e∨f∨g]

		8< https://en.wikipedia.org/wiki/Short-circuit_evaluation >8

		:∧∧(,a,b,c,d,e,f,g) 8≪ ,[,a∧∧b∧∧c∧∧d∧∧e∧∧f∧∧g]
		:∨∨(,a,b,c,d,e,f,g) 8≪ ,[,a∨∨b∨∨c∨∨d∨∨e∨∨f∨∨g]
	]

	,[
		8< https://en.wikipedia.org/wiki/Inequality_(mathematics) >8

		8< https://en.wikipedia.org/wiki/Commutative_property >8

		:=(,a,b,c,d,e,f,g) 8≪ ,[,a=b=c=d=e=f=g]
		:≠(,a,b,c,d,e,f,g) 8≪ ,[,a≠b≠c≠d≠e≠f≠g]
		:<(,a,b,c,d,e,f,g) 8≪ ,[,a<b<c<d<e<f<g]
		:>(,a,b,c,d,e,f,g) 8≪ ,[,a>b>c>d>e>f>g]
		:≯(,a,b,c,d,e,f,g) 8≪ ,[,a≯b≯c≯d≯e≯f≯g]
		:≮(,a,b,c,d,e,f,g) 8≪ ,[,a≮b≮c≮d≮e≮f≮g]
		:≤(,a,b,c,d,e,f,g) 8≪ ,[,a≤b≤c≤d≤e≤f≤g]
		:≥(,a,b,c,d,e,f,g) 8≪ ,[,a≥b≥c≥d≥e≥f≥g]
		:≰(,a,b,c,d,e,f,g) 8≪ ,[,abcdefg]
		:≱(,a,b,c,d,e,f,g) 8≪ ,[,abcdefg]

		:≪(,a,b,c,d,e,f,g) 8≪ ,[,lowest_value,[,lowest_indices]]
		:≫(,a,b,c,d,e,f,g) 8≪ ,[,highest_value,[,highest_indices]]

		8< https://en.wikipedia.org/wiki/Short-circuit_evaluation >8

		:==(,a,b,c,d,e,f,g) 8≪ ,[,a==b==c==d==e==f==g]
		:≠≠(,a,b,c,d,e,f,g) 8≪ ,[,a≠≠b≠≠c≠≠d≠≠e≠≠f≠≠g]
		:<<(,a,b,c,d,e,f,g) 8≪ ,[,a<<b<<c<<d<<e<<f<<g]
		:>>(,a,b,c,d,e,f,g) 8≪ ,[,a>>b>>c>>d>>e>>f>>g]
		:≯≯(,a,b,c,d,e,f,g) 8≪ ,[,a≯≯b≯≯c≯≯d≯≯e≯≯f≯≯g]
		:≮≮(,a,b,c,d,e,f,g) 8≪ ,[,a≮≮b≮≮c≮≮d≮≮e≮≮f≮≮g]
		:≤≤(,a,b,c,d,e,f,g) 8≪ ,[,a≤≤b≤≤c≤≤d≤≤e≤≤f≤≤g]
		:≥≥(,a,b,c,d,e,f,g) 8≪ ,[,a≥≥b≥≥c≥≥d≥≥e≥≥f≥≥g]
		:≰≰(,a,b,c,d,e,f,g) 8≪ ,[,a≰≰b≰≰c≰≰d≰≰e≰≰f≰≰g]
		:≱≱(,a,b,c,d,e,f,g) 8≪ ,[,a≱≱b≱≱c≱≱d≱≱e≱≱f≱≱g]

		:≪≪(,a,b,c,d,e,f,g) 8≪ ,[,lowest_value,[,lowest_indices]]
		:≫≫(,a,b,c,d,e,f,g) 8≪ ,[,highest_value,[,highest_indices]]
	]
]

≫ & ≪ & ETC output should have equivalents for other mantras
probably just generalise the higher order mantra, but what to name it? preferably a single character...
:name(,fs)(,xs) 8≪ ,[,passes] ... ,[,[,pass_value,[,pass_indices]]]
just like :root(,nths)(,radicands)
name can be ⊤, passes, truths, ETC
can also do the opposite
:⊥(,fs)(,xs) 8≪ ,[,fails] ... ,[,[,fail_value,[,fail_indice]]]
:⊤⊥(,fs)(,xs) 8≪ ,[,[,pass_value,[,fail_indices]]]
:⊥⊤(,fs)(,xs) 8≪ ,[,[,[,fail_values],[,pass_indices]]]
:⊤(,fs)(,xs) 8≪ ,[,passes] ... ,[,[,pass_value,[,pass_indices]]]
I need to think about this; I think ,[,value,[,indices]] pairs are better, but not for mixed passes/fails
,[,value,indices] would be faster...
a higher order mantra can decide between ,[,value,[,indices]] & ,[,value,indices]
